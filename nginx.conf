server {
  listen 80;
  server_name localhost;

  location / {
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
  }

  location /config.js {
    root   /usr/share/nginx/html;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    try_files $uri =404;
  }

  location /api/ {
      proxy_pass __API_BASE_URL__/api/;
      proxy_ssl_verify off;  # Disable SSL certificate verification. Caution!!!
      proxy_ssl_server_name on;
      set $base_url "__API_BASE_URL__";
      proxy_read_timeout 120;
      proxy_next_upstream error;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;

      # Handle CORS preflight requests
      if ($request_method = OPTIONS) {
          add_header Access-Control-Allow-Origin "*" always;
          add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
          add_header 'Access-Control-Allow-Headers' 'DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          return 204;
      }

      # Add CORS headers to actual responses
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
      add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
  }

}
